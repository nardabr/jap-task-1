// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Database;

#nullable disable

namespace Server.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Server.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Server.Core.Entities.LectureEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("LectureEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This course will teach you React.js in a practice-oriented way, using all the latest patterns and best practices you need. You will learn all the key fundamentals as well as advanced concepts and related topics to turn you into a React.js developer.",
                            EndDate = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Udemy - React",
                            OrderNumber = 1,
                            ProgramId = 1,
                            StartDate = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lecture",
                            Url = "https://www.udemy.com/course/react-the-complete-guide-incl-redux/?src=sac&kw=react",
                            WorkHours = 40
                        },
                        new
                        {
                            Id = 2,
                            Description = "The .NET framework is getting better and better and more important in the web development world nowadays. Almost every request I get for new web development projects is asking for knowledge in .NET, including Web API and Entity Framework Core. So, knowing the fundamentals of back-end web development with .NET can be highly beneficial to your career. And that’s where this course comes in.",
                            EndDate = new DateTime(2022, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Udemy - .Net Core",
                            OrderNumber = 2,
                            ProgramId = 1,
                            StartDate = new DateTime(2022, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lecture",
                            Url = "https://www.udemy.com/course/net-core-31-web-api-entity-framework-core-jumpstart/",
                            WorkHours = 20
                        },
                        new
                        {
                            Id = 3,
                            Description = "Goal of the project is to build JAP platform. The main idea is to build a platform where we could have evidence of students, selections and programs.",
                            EndDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test Project - Task",
                            OrderNumber = 3,
                            ProgramId = 1,
                            StartDate = new DateTime(2022, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Event",
                            Url = "https://www.udemy.com/",
                            WorkHours = 40
                        },
                        new
                        {
                            Id = 4,
                            Description = "Edit completed assignment",
                            EndDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task Refactoring",
                            OrderNumber = 4,
                            ProgramId = 1,
                            StartDate = new DateTime(2022, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Event",
                            Url = "https://www.udemy.com/",
                            WorkHours = 8
                        },
                        new
                        {
                            Id = 5,
                            Description = "2022 BEST job oriented Software Manual Testing course on real time Project+Interview ques+Resume Prep+ Lifetime Support",
                            EndDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Udemy - Software Testing",
                            OrderNumber = 1,
                            ProgramId = 2,
                            StartDate = new DateTime(2022, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lecture",
                            Url = "https://www.udemy.com/course/learn-software-testing-in-practical-become-a-qa-expert/?src=sac&kw=qa",
                            WorkHours = 10
                        },
                        new
                        {
                            Id = 6,
                            Description = "Become a Master in Manual Testing QA with Live Testing Projects, AGILE, JIRA, 100+Interview Questions & Lifetime support",
                            EndDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Udemy - Manual Testing",
                            OrderNumber = 2,
                            ProgramId = 2,
                            StartDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lecture",
                            Url = "https://www.udemy.com/course/specialize-in-software-testing-with-real-examples-agile-jira/?src=sac&kw=qa",
                            WorkHours = 10
                        },
                        new
                        {
                            Id = 7,
                            Description = "Goal of the project is to build JAP platform. The main idea is to build a platform where we could have evidence of students, selections and programs.",
                            EndDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test Project - Task",
                            OrderNumber = 3,
                            ProgramId = 2,
                            StartDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Event",
                            Url = "https://www.udemy.com/",
                            WorkHours = 40
                        },
                        new
                        {
                            Id = 8,
                            Description = "Edit completed assignment",
                            EndDate = new DateTime(2022, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task Refactoring",
                            OrderNumber = 4,
                            ProgramId = 2,
                            StartDate = new DateTime(2022, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Event",
                            Url = "https://www.udemy.com/",
                            WorkHours = 8
                        },
                        new
                        {
                            Id = 9,
                            Description = "Begin DevOps Career As an Absolute Beginner | Linux, AWS, Scripting, Jenkins, Ansible, Docker, K8s, N-Tier Projects",
                            EndDate = new DateTime(2022, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DevOps Beginners to Advanced",
                            OrderNumber = 1,
                            ProgramId = 3,
                            StartDate = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lecture",
                            Url = "https://www.udemy.com/course/decodingdevops/?src=sac&kw=devop",
                            WorkHours = 50
                        },
                        new
                        {
                            Id = 10,
                            Description = "DevOps for Absolute Beginners: Azure DevOps, Docker, Kubernetes, Jenkins, Terraform, Ansible - AWS, Azure & Google Cloud",
                            EndDate = new DateTime(2022, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Learn DevOps",
                            OrderNumber = 2,
                            ProgramId = 3,
                            StartDate = new DateTime(2022, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Lecture",
                            Url = "https://www.udemy.com/course/devops-with-docker-kubernetes-and-azure-devops/?src=sac&kw=devop",
                            WorkHours = 20
                        },
                        new
                        {
                            Id = 11,
                            Description = "Goal of the project is to build JAP platform. The main idea is to build a platform where we could have evidence of students, selections and programs.",
                            EndDate = new DateTime(2022, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Test Project - Task",
                            OrderNumber = 3,
                            ProgramId = 3,
                            StartDate = new DateTime(2022, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Event",
                            Url = "https://www.udemy.com/",
                            WorkHours = 40
                        },
                        new
                        {
                            Id = 12,
                            Description = "Edit completed assignment",
                            EndDate = new DateTime(2022, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Task Refactoring",
                            OrderNumber = 4,
                            ProgramId = 3,
                            StartDate = new DateTime(2022, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Event",
                            Url = "https://www.udemy.com/",
                            WorkHours = 8
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dev JAP is a 9-week program designed to prepare you for a full-time client engagement where you would work as a Junior Software Developer within existing Mistral teams. The program is designed to fit your pace and will be completely personalized according to your current capabilities. You can complete the program even sooner than 9 weeks if you work hard! Everything is up to you.",
                            Name = "JAP Dev"
                        },
                        new
                        {
                            Id = 2,
                            Description = "QA JAP is a 5-week program designed to prepare you for a full-time client engagement where you would work as a Junior Quality Assurance engineer within existing Mistral teams. The program is designed to fit your pace and will be completely personalized according to your current capabilities. If you work hard, you can complete the program even sooner than 5 weeks! Everything is up to you.",
                            Name = "JAP QA"
                        },
                        new
                        {
                            Id = 3,
                            Description = "DevOps JAP is a 13-week program designed to prepare you for a full-time client engagement where you would work as a Junior DevOps engineer within existing Mistral teams. The program is designed to fit your pace and will be completely personalized according to your current capabilities. You can complete the program even sooner than 13 weeks if you work hard! Everything is up to you.",
                            Name = "JAP DevOps"
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "325435",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2362452",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("SelectionStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SelectionStatusId");

                    b.ToTable("Selections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndAt = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "JAP Dev 09/2022",
                            ProgramId = 1,
                            SelectionStatusId = 1,
                            StartAt = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndAt = new DateTime(2022, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "JAP QA 08/2022",
                            ProgramId = 2,
                            SelectionStatusId = 1,
                            StartAt = new DateTime(2022, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndAt = new DateTime(2022, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "JAP DevOps 09/2022",
                            ProgramId = 3,
                            SelectionStatusId = 1,
                            StartAt = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.SelectionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SelectionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Complete"
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SelectionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SelectionId");

                    b.HasIndex("StudentStatusId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Ada",
                            LastName = "Lovelace",
                            SelectionId = 1,
                            StudentStatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Grace",
                            LastName = "Hopper",
                            SelectionId = 2,
                            StudentStatusId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Joan",
                            LastName = "Clarke",
                            SelectionId = 3,
                            StudentStatusId = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Harry",
                            LastName = "Potter",
                            SelectionId = 1,
                            StudentStatusId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Hermione",
                            LastName = "Granger",
                            SelectionId = 2,
                            StudentStatusId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Ron",
                            LastName = "Weasley",
                            SelectionId = 3,
                            StudentStatusId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Albus",
                            LastName = "Dumbledore",
                            SelectionId = 1,
                            StudentStatusId = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Lord",
                            LastName = "Voldemort",
                            SelectionId = 2,
                            StudentStatusId = 3,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Draco",
                            LastName = "Malfoy",
                            SelectionId = 3,
                            StudentStatusId = 3,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Sirius",
                            LastName = "Black",
                            SelectionId = 1,
                            StudentStatusId = 4,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.StudentLectureEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoneByCandidate")
                        .HasColumnType("int");

                    b.Property<int>("LectureEventId")
                        .HasColumnType("int");

                    b.Property<string>("StatusByCandidate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LectureEventId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLectureEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoneByCandidate = 100,
                            LectureEventId = 1,
                            StatusByCandidate = "Done",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoneByCandidate = 80,
                            LectureEventId = 2,
                            StatusByCandidate = "In Progress",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            DoneByCandidate = 10,
                            LectureEventId = 3,
                            StatusByCandidate = "Started",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 4,
                            DoneByCandidate = 0,
                            LectureEventId = 4,
                            StatusByCandidate = "Not Started",
                            StudentId = 1
                        },
                        new
                        {
                            Id = 5,
                            DoneByCandidate = 100,
                            LectureEventId = 5,
                            StatusByCandidate = "Done",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 6,
                            DoneByCandidate = 80,
                            LectureEventId = 6,
                            StatusByCandidate = "In Progress",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 7,
                            DoneByCandidate = 10,
                            LectureEventId = 7,
                            StatusByCandidate = "Started",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 8,
                            DoneByCandidate = 0,
                            LectureEventId = 8,
                            StatusByCandidate = "Not Started",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 9,
                            DoneByCandidate = 100,
                            LectureEventId = 9,
                            StatusByCandidate = "Done",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 10,
                            DoneByCandidate = 80,
                            LectureEventId = 10,
                            StatusByCandidate = "In Progress",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 11,
                            DoneByCandidate = 10,
                            LectureEventId = 11,
                            StatusByCandidate = "Started",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 12,
                            DoneByCandidate = 0,
                            LectureEventId = 12,
                            StatusByCandidate = "Not Started",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 13,
                            DoneByCandidate = 100,
                            LectureEventId = 1,
                            StatusByCandidate = "Done",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 14,
                            DoneByCandidate = 80,
                            LectureEventId = 2,
                            StatusByCandidate = "In Progress",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 15,
                            DoneByCandidate = 10,
                            LectureEventId = 3,
                            StatusByCandidate = "Started",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 16,
                            DoneByCandidate = 0,
                            LectureEventId = 4,
                            StatusByCandidate = "Not Started",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 17,
                            DoneByCandidate = 100,
                            LectureEventId = 5,
                            StatusByCandidate = "Done",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 18,
                            DoneByCandidate = 80,
                            LectureEventId = 6,
                            StatusByCandidate = "In Progress",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 19,
                            DoneByCandidate = 10,
                            LectureEventId = 7,
                            StatusByCandidate = "Started",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 20,
                            DoneByCandidate = 0,
                            LectureEventId = 8,
                            StatusByCandidate = "Not Started",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 21,
                            DoneByCandidate = 100,
                            LectureEventId = 9,
                            StatusByCandidate = "Done",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 22,
                            DoneByCandidate = 80,
                            LectureEventId = 10,
                            StatusByCandidate = "In Progress",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 23,
                            DoneByCandidate = 10,
                            LectureEventId = 11,
                            StatusByCandidate = "Started",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 24,
                            DoneByCandidate = 0,
                            LectureEventId = 12,
                            StatusByCandidate = "Not Started",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 25,
                            DoneByCandidate = 100,
                            LectureEventId = 1,
                            StatusByCandidate = "Done",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 26,
                            DoneByCandidate = 80,
                            LectureEventId = 2,
                            StatusByCandidate = "In Progress",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 27,
                            DoneByCandidate = 10,
                            LectureEventId = 3,
                            StatusByCandidate = "Started",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 28,
                            DoneByCandidate = 0,
                            LectureEventId = 4,
                            StatusByCandidate = "Not Started",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 29,
                            DoneByCandidate = 100,
                            LectureEventId = 5,
                            StatusByCandidate = "Done",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 30,
                            DoneByCandidate = 80,
                            LectureEventId = 6,
                            StatusByCandidate = "In Progress",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 31,
                            DoneByCandidate = 10,
                            LectureEventId = 7,
                            StatusByCandidate = "Started",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 32,
                            DoneByCandidate = 0,
                            LectureEventId = 8,
                            StatusByCandidate = "Not Started",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 33,
                            DoneByCandidate = 100,
                            LectureEventId = 9,
                            StatusByCandidate = "Done",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 34,
                            DoneByCandidate = 80,
                            LectureEventId = 10,
                            StatusByCandidate = "In Progress",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 35,
                            DoneByCandidate = 10,
                            LectureEventId = 11,
                            StatusByCandidate = "Started",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 36,
                            DoneByCandidate = 0,
                            LectureEventId = 12,
                            StatusByCandidate = "Not Started",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 37,
                            DoneByCandidate = 100,
                            LectureEventId = 1,
                            StatusByCandidate = "Done",
                            StudentId = 10
                        },
                        new
                        {
                            Id = 38,
                            DoneByCandidate = 80,
                            LectureEventId = 2,
                            StatusByCandidate = "In Progress",
                            StudentId = 10
                        },
                        new
                        {
                            Id = 39,
                            DoneByCandidate = 10,
                            LectureEventId = 3,
                            StatusByCandidate = "Started",
                            StudentId = 10
                        },
                        new
                        {
                            Id = 40,
                            DoneByCandidate = 0,
                            LectureEventId = 4,
                            StatusByCandidate = "Not Started",
                            StudentId = 10
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.StudentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "In Program"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Success"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Failed"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Extended"
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4764ee1b-689c-40f9-b931-a974e75e5df4",
                            Email = "admin@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECGbvsDlyW/p+BsBDI5KMk+Gm+DzQ962PGgRmLbT6WX26vlDHp0gL64IKXiGxV+S7w==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "965dae27-04ae-4bbf-aa37-a228e8d1c5fe",
                            Email = "adalovelace@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADALOVELACE@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECYOb72TK40gVWhIGJt2/M7wNHCZTOAyAvD3i8bG81L49MJcs0Ci/gS1wveKD1mpNA==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "adalovelace"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "538e6c91-2753-4332-8331-fdfae31ecb4f",
                            Email = "gracehopper@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACEHOPPER@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUKnEP3+5OhS9XFOKPvOqPh/mJghlQ4GOjpAsByx9M2z7MBZxyYWZj9bkKblNjo1g==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "gracehopper"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31a3445b-f071-4b14-9436-b49b2969d957",
                            Email = "joanclarke@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOANCLARKE@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfU1Hp+FEJERuDWWL1BwMBFIfbpW64/qyDBFEvXi0X9n1pheVD4ZBgAsOiqp4gN9A==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "joanclarke"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b28106c-7f71-46dd-92a5-169d094e65c2",
                            Email = "harrypotter@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HARRYPOTTER@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJBS2TkY+unOHof6q6R0Yqlgst3B5Qj0KBhdgJtnzHoYincfQgS0n+hqgSB9YXG6gA==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "harrypotter"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18026116-c7a6-4f57-838c-415c5ae82b57",
                            Email = "hermionegranger@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HERMIONEGRANGER@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEV3EKSLxXO5kZBxi9cf/0cSirBpbM1wWHA3tmPpreCyOGGeCDp82lLYzQXdyOgBSA==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "hermionegranger"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b19d016-9188-427a-b076-1c6966eeb20f",
                            Email = "ronweasley@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RONWEASLEY@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBhEZb2virMPaauHmjyIIu6c9uOcv6WTkAMO19khylSP32i68bs36E0b+uDQBh0CrQ==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ronweasley"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87ec9ce2-36f6-44a4-91cf-67fb4a1b1fb8",
                            Email = "albusdumbledore@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALBUSDUMBLEDORE@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEGvWoLu0UdbKn79PsXbk+yxuPo1TBx6BzYvw39dwHtKIPQSHNZMn6AGWh4AWo2pCA==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "albusdumbledore"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c03ab856-f239-45f0-9dd8-23d7436ca801",
                            Email = "lordvoldemort@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LORDVOLDEMORT@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+dhbjsufxF4rLkqV8Tx2TGQNHkAYgbNHcM65IX5hV3Im7gsuTsfG9QplhPPgDZ/A==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "lordvoldemort"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b4b5759-135f-487f-b6fd-4363f23d691c",
                            Email = "dracomalfoy@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRACOMALFOY@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHY2e2uXJ9AxGYudR+of1gzZgp50guPcOup85nidgxOA/C4i24eJdxEHQ5vdr9L54g==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "dracomalfoy"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef65beae-8cbe-4c96-9d62-3f6ae3d8fedc",
                            Email = "siriusblack@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SIRIUSBLACK@EMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3V4Cp8QIIsyJIpTpYyNnntQnzlAD6qZJ/sXyaWCEK8z5jBLfHV9R0kVPzVdEdgCQ==",
                            PhoneNumberConfirmed = false,
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "siriusblack"
                        });
                });

            modelBuilder.Entity("Server.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = -1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Server.Core.Requests.Selection.GetOverallSuccesRateDto", b =>
                {
                    b.Property<double>("OverallSuccessRate")
                        .HasColumnType("float");

                    b.ToTable("GetOverallSuccesRate");
                });

            modelBuilder.Entity("Server.Core.Requests.Selection.GetSelectionsSuccesRatesDto", b =>
                {
                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SelectionSuccessRate")
                        .HasColumnType("float");

                    b.ToTable("GetSelectionsSuccessRates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Server.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Server.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Server.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Server.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Core.Entities.LectureEvent", b =>
                {
                    b.HasOne("Server.Core.Entities.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Server.Core.Entities.Selection", b =>
                {
                    b.HasOne("Server.Core.Entities.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.SelectionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("SelectionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Server.Core.Entities.Student", b =>
                {
                    b.HasOne("Server.Core.Entities.Selection", "Selection")
                        .WithMany()
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.Core.Entities.StudentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StudentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Selection");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Server.Core.Entities.StudentLectureEvents", b =>
                {
                    b.HasOne("Server.Core.Entities.LectureEvent", "LectureEvent")
                        .WithMany()
                        .HasForeignKey("LectureEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LectureEvent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Server.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Server.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Server.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
